package msgHandler

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"os"
	"quest/pkg/service"
	"strconv"
	"strings"
)

type MSGHandler struct {
	service *service.Service
	bot     *tgbotapi.BotAPI
}

func NewMSGHandler(service *service.Service, bot *tgbotapi.BotAPI) *MSGHandler {
	return &MSGHandler{
		service: service,
		bot:     bot,
	}
}

func (h *MSGHandler) Help(update tgbotapi.Update) error {
	msgText := "/support - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n/catalog - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–≤–µ—Å—Ç–æ–≤"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) AnotherMessage(update tgbotapi.Update) error {
	msgText := "/support - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) KeyBoard(update tgbotapi.Update) error {
	btnCatalog1 := tgbotapi.NewKeyboardButton("üìö–ö–∞—Ç–∞–ª–æ–≥")
	btnCatalog2 := tgbotapi.NewKeyboardButton("üõ†Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
	btnCatalog3 := tgbotapi.NewKeyboardButton("üÜòü§ù–ü–æ–º–æ—â—å")
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–µ–Ω—é:")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			btnCatalog1,
			btnCatalog2,
			btnCatalog3,
		),
	)

	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) Support(update tgbotapi.Update) error {
	msgText := os.Getenv("TG_SUPPORT_LYNC")
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) DetailQuestInfo(update tgbotapi.Update) error {
	commandText := strings.TrimPrefix(update.Message.Text, "/info")
	questId, err := strconv.Atoi(commandText)
	if err != nil {
		return err
	}

	quest, err := h.service.GetQuest(questId)
	if err != nil {
		return err
	}

	msgText := fmt.Sprintf(`
–ù–∞–∑–≤–∞–Ω–∏–µ: %s
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ %s
–¶–µ–ª–∏: %s
–û–ø–∏—Å–∞–Ω–∏–µ: %s
–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: %d –ª–µ—Ç
–°–ª–æ–∂–Ω–æ—Å—Ç—å: %s
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –º–∏–Ω—É—Ç 
–ü—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è: %s
–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: %s`,
		quest.Name, quest.AuthorComment, quest.Point, quest.Description, quest.AgeLevel,
		quest.Difficult, quest.Duration, quest.Location, quest.Organizer,
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) ShowQuestPage(update tgbotapi.Update, currentPage int) error {
	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(),
	)
	inlineKeyboard.InlineKeyboard[0] = h.leafThroughPage(currentPage)

	quests, err := h.service.GetQuestsByPage(currentPage)
	if err != nil {
		return err
	}

	msgText := ""
	for i, quest := range quests {
		msgText = msgText + fmt.Sprintf("–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–°—Å—ã–ª–∫–∞: /info%d",
			quest.Name, quest.Description, quest.Id)
		if i != len(quests) {
			msgText = msgText + "\n\n"
		}
	}

	var chatId int64
	if update.CallbackQuery != nil {
		chatId = update.CallbackQuery.Message.Chat.ID
	} else if update.Message != nil {
		chatId = update.Message.Chat.ID
	} else {
		return fmt.Errorf("not found user")
	}

	msg := tgbotapi.NewMessage(chatId, msgText)
	msg.ReplyMarkup = inlineKeyboard
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) leafThroughPage(currentPage int) []tgbotapi.InlineKeyboardButton {
	page, err := h.service.GetPageAmount()
	if err != nil {
		return nil
	}
	var buttons []tgbotapi.InlineKeyboardButton
	if page != 1 && currentPage != 1 {
		button := "page1"
		buttons = append(
			buttons,
			tgbotapi.InlineKeyboardButton{
				Text:         "1",
				CallbackData: &button,
			},
		)
	}

	if currentPage != 1 {
		button := fmt.Sprintf("page%d", currentPage-1)
		buttons = append(
			buttons,
			tgbotapi.InlineKeyboardButton{
				Text:         "<",
				CallbackData: &button,
			},
		)
	}

	if currentPage < page {
		button := fmt.Sprintf("page%d", currentPage+1)
		buttons = append(
			buttons,
			tgbotapi.InlineKeyboardButton{
				Text:         ">",
				CallbackData: &button,
			},
		)
	}

	if page != 1 && currentPage != page {
		button := fmt.Sprintf("page%d", page)
		buttons = append(
			buttons,
			tgbotapi.InlineKeyboardButton{
				Text:         strconv.Itoa(page),
				CallbackData: &button,
			},
		)
	}

	return buttons
}
