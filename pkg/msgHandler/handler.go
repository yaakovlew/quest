package msgHandler

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"os"
	"quest/pkg/service"
	"strconv"
	"strings"
)

type MSGHandler struct {
	service *service.Service
	bot     *tgbotapi.BotAPI
}

func NewMSGHandler(service *service.Service, bot *tgbotapi.BotAPI) *MSGHandler {
	return &MSGHandler{
		service: service,
		bot:     bot,
	}
}

func (h *MSGHandler) Help(message *tgbotapi.Message) error {
	msgText := "/support - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n/catalog - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–≤–µ—Å—Ç–æ–≤"
	msg := tgbotapi.NewMessage(message.Chat.ID, msgText)
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) AnotherMessage(message *tgbotapi.Message) error {
	msgText := "/support - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
	msg := tgbotapi.NewMessage(message.Chat.ID, msgText)
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) KeyBoard(message *tgbotapi.Message) error {
	btnCatalog1 := tgbotapi.NewKeyboardButton("üìö–ö–∞—Ç–∞–ª–æ–≥")
	btnCatalog2 := tgbotapi.NewKeyboardButton("üõ†Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
	btnCatalog3 := tgbotapi.NewKeyboardButton("üÜòü§ù–ü–æ–º–æ—â—å")
	msg := tgbotapi.NewMessage(message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –≤–æ–∑—Ä–∞—Å—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			btnCatalog1,
			btnCatalog2,
			btnCatalog3,
		),
	)

	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) Support(message *tgbotapi.Message) error {
	msgText := os.Getenv("TG_SUPPORT_LYNC")
	msg := tgbotapi.NewMessage(message.Chat.ID, msgText)
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) DetailQuestInfo(message *tgbotapi.Message) error {
	commandText := strings.TrimPrefix(message.Text, "/info-")
	questId, err := strconv.Atoi(commandText)
	if err != nil {
		return err
	}

	quest, err := h.service.GetQuest(questId)
	if err != nil {
		return err
	}

	msgText := fmt.Sprintf(`
–ù–∞–∑–≤–∞–Ω–∏–µ: %s
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ %s
–¶–µ–ª–∏: %s
–û–ø–∏—Å–∞–Ω–∏–µ: %s
–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: %d –ª–µ—Ç
–°–ª–æ–∂–Ω–æ—Å—Ç—å: %s
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –º–∏–Ω—É—Ç 
–ü—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è: %s
–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: %s`,
		quest.Name, quest.AuthorComment, quest.Point, quest.Description, quest.AgeLevel,
		quest.Difficult, quest.Duration, quest.Location, quest.Organizer,
	)

	msg := tgbotapi.NewMessage(message.Chat.ID, msgText)
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}

func (h *MSGHandler) ShowQuestPage(message *tgbotapi.Message, currentPage int) error {
	page, _ := h.service.GetPageAmount()

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1", "button1"),
			tgbotapi.NewInlineKeyboardButtonData("–û–∫–Ω–æ 2", "button2"),
			tgbotapi.NewInlineKeyboardButtonData("–û–∫–Ω–æ 3", "button3"),
		),
	)
	msg := tgbotapi.NewMessage(message.Chat.ID, strconv.Itoa(page))
	msg.ReplyMarkup = inlineKeyboard
	if _, err := h.bot.Send(msg); err != nil {
		return err
	}

	return nil
}
